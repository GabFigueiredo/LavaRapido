/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package lavarapido.view;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import lavarapido.controller.AgendamentoController;
import lavarapido.controller.ClienteController;
import lavarapido.controller.TipoServicoController;
import lavarapido.model.Agendamento;
import lavarapido.model.Cliente;
import lavarapido.model.TipoServico;

/**
 *
 * @author gabri
 */
public class TelaAgendamentos extends javax.swing.JPanel {
    private DefaultTableModel modelo;
    private final ClienteController clienteController = new ClienteController();
    private final TipoServicoController servicoController = new TipoServicoController();
    private final AgendamentoController agendamentoController = new AgendamentoController();
    private List<Cliente> listaClientes;
    private List<TipoServico> listaServicos;
    private List<Agendamento> listaAgendamentos;

    /**
     * Creates new form TelaAgendamentos
     * @throws java.sql.SQLException
     */
    public TelaAgendamentos() throws SQLException {
        listaClientes = clienteController.listarClientes();
        listaServicos = servicoController.listarTiposServico();
        initComponents();

        for (Cliente cliente : listaClientes) {
            ClienteComboBox.addItem(cliente); // adiciona o objeto completo
        }

        for (TipoServico servico : listaServicos) {
            ServicoComboBox.addItem(servico);
        }
        configurarTabela();
        atualizarTabela();
        adicionarListenerDeEdicao();
    }
    
    private void configurarTabela() {
        modelo = new DefaultTableModel(
            new String[] {"ID", "Nome", "Serviço", "Data", "Status"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return (column != 0 && column != 1 && column != 2 && column != 3); // ID não é editável
            }
        };

        tabelaAgendamentos.setModel(modelo);
    }

    // Listener para detectar alterações na tabela
    private void adicionarListenerDeEdicao() {
        modelo.addTableModelListener(e -> {
            if (e.getType() == TableModelEvent.UPDATE) {
                int linha = e.getFirstRow();

                // Recupera os valores editados
                int id = (int) modelo.getValueAt(linha, 0);
                String status = (String) modelo.getValueAt(linha, 4);

                try {
                    agendamentoController.editarAgendamento(id, status);
                    System.out.println("Agendamento atualizado com sucesso.");
                    JOptionPane.showMessageDialog(null, "Agendamento atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar agendamento: " + ex.getMessage());
                }
            }
        });
    }

    private void atualizarTabela() throws SQLException {
        this.listaAgendamentos = agendamentoController.listarAgendamentos();

        modelo.setRowCount(0); // Limpa a tabela

        for (Agendamento agendamento: listaAgendamentos) {
            modelo.addRow(new Object[] {
                agendamento.getId(),
                agendamento.getCliente(),
                agendamento.getTipoServico(),
                agendamento.getDataHora(),
                    agendamento.getStatus()
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        TabelaClientePane = new javax.swing.JPanel();
        CadastrarClientTitle1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAgendamentos = new javax.swing.JTable();
        excluirBtn = new javax.swing.JButton();
        atualizarBtn = new javax.swing.JButton();
        CadastrarClientePane = new javax.swing.JPanel();
        CadastrarClientTitle = new javax.swing.JLabel();
        Separator = new javax.swing.JSeparator();
        Inputs = new javax.swing.JPanel();
        NomePane = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ClienteComboBox = new javax.swing.JComboBox<>();
        EmailPane = new javax.swing.JPanel();
        CPFPane = new javax.swing.JPanel();
        DiaInput = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        MesInput = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        AnoInput = new javax.swing.JTextField();
        HoraInput = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        criarClienteBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ServicoComboBox = new javax.swing.JComboBox<>();

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        CadastrarClientTitle1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CadastrarClientTitle1.setText("Todos os agendamentos");

        tabelaAgendamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Serviço", "Data", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaAgendamentos);

        excluirBtn.setText("Excluir");
        excluirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirBtnActionPerformed(evt);
            }
        });

        atualizarBtn.setText("Atualizar");
        atualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TabelaClientePaneLayout = new javax.swing.GroupLayout(TabelaClientePane);
        TabelaClientePane.setLayout(TabelaClientePaneLayout);
        TabelaClientePaneLayout.setHorizontalGroup(
            TabelaClientePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabelaClientePaneLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(TabelaClientePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabelaClientePaneLayout.createSequentialGroup()
                        .addComponent(atualizarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(excluirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CadastrarClientTitle1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 686, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        TabelaClientePaneLayout.setVerticalGroup(
            TabelaClientePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabelaClientePaneLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(CadastrarClientTitle1)
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(TabelaClientePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excluirBtn)
                    .addComponent(atualizarBtn))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tabela", TabelaClientePane);

        CadastrarClientTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        CadastrarClientTitle.setText("Criar agendamento");

        jLabel3.setText("Cliente");

        javax.swing.GroupLayout NomePaneLayout = new javax.swing.GroupLayout(NomePane);
        NomePane.setLayout(NomePaneLayout);
        NomePaneLayout.setHorizontalGroup(
            NomePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NomePaneLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(NomePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ClienteComboBox, 0, 209, Short.MAX_VALUE)
                    .addGroup(NomePaneLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 172, Short.MAX_VALUE)))
                .addContainerGap())
        );
        NomePaneLayout.setVerticalGroup(
            NomePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NomePaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(ClienteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout EmailPaneLayout = new javax.swing.GroupLayout(EmailPane);
        EmailPane.setLayout(EmailPaneLayout);
        EmailPaneLayout.setHorizontalGroup(
            EmailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 213, Short.MAX_VALUE)
        );
        EmailPaneLayout.setVerticalGroup(
            EmailPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 72, Short.MAX_VALUE)
        );

        jLabel6.setText("Dia");

        jLabel7.setText("Mês");

        jLabel8.setText("Ano");

        jLabel9.setText("Hora");

        javax.swing.GroupLayout CPFPaneLayout = new javax.swing.GroupLayout(CPFPane);
        CPFPane.setLayout(CPFPaneLayout);
        CPFPaneLayout.setHorizontalGroup(
            CPFPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CPFPaneLayout.createSequentialGroup()
                .addGroup(CPFPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CPFPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6))
                    .addComponent(DiaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CPFPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(MesInput, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CPFPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AnoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CPFPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HoraInput, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 86, Short.MAX_VALUE))
        );
        CPFPaneLayout.setVerticalGroup(
            CPFPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CPFPaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(CPFPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(CPFPaneLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(10, 10, 10)
                        .addComponent(HoraInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CPFPaneLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(10, 10, 10)
                        .addComponent(AnoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CPFPaneLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(10, 10, 10)
                        .addComponent(MesInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CPFPaneLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(10, 10, 10)
                        .addComponent(DiaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );

        criarClienteBtn.setText("Criar");
        criarClienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarClienteBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Serviço");

        javax.swing.GroupLayout InputsLayout = new javax.swing.GroupLayout(Inputs);
        Inputs.setLayout(InputsLayout);
        InputsLayout.setHorizontalGroup(
            InputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(InputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(criarClienteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(InputsLayout.createSequentialGroup()
                        .addGroup(InputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CPFPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(InputsLayout.createSequentialGroup()
                                .addComponent(NomePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(InputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(ServicoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(23, 23, 23)
                        .addComponent(EmailPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InputsLayout.setVerticalGroup(
            InputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InputsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InputsLayout.createSequentialGroup()
                        .addGroup(InputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NomePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(InputsLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ServicoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(CPFPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(EmailPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(criarClienteBtn)
                .addContainerGap(285, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout CadastrarClientePaneLayout = new javax.swing.GroupLayout(CadastrarClientePane);
        CadastrarClientePane.setLayout(CadastrarClientePaneLayout);
        CadastrarClientePaneLayout.setHorizontalGroup(
            CadastrarClientePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Separator)
            .addGroup(CadastrarClientePaneLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(CadastrarClientTitle)
                .addContainerGap(549, Short.MAX_VALUE))
            .addComponent(Inputs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CadastrarClientePaneLayout.setVerticalGroup(
            CadastrarClientePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CadastrarClientePaneLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(CadastrarClientTitle)
                .addGap(20, 20, 20)
                .addComponent(Separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Inputs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("Cadastrar", CadastrarClientePane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void excluirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirBtnActionPerformed
        int linhaSelecionada = tabelaAgendamentos.getSelectedRow();
        if (linhaSelecionada != -1) {
            int id = (int) tabelaAgendamentos.getValueAt(linhaSelecionada, 0);
            String nome = (String) tabelaAgendamentos.getValueAt(linhaSelecionada, 1); // nome está na coluna 1

            int confirmacao = JOptionPane.showConfirmDialog(
                this,
                "Deseja realmente excluir o agendamento \"" + nome + "\"?",
                "Confirmar exclusão",
                JOptionPane.YES_NO_OPTION
            );

            if (confirmacao == JOptionPane.YES_OPTION) {
                try {
                    agendamentoController.excluirAgendamento(id);
                    atualizarTabela(); // para atualizar a exibição da tabela
                } catch (SQLException ex) {
                    Logger.getLogger(TelaClientes.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Erro ao excluir agendamento: " + ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um agendamento para excluir.");
        }
    }//GEN-LAST:event_excluirBtnActionPerformed

    private void atualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarBtnActionPerformed
        try {
            atualizarTabela();
        } catch (SQLException ex) {
            Logger.getLogger(TelaClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_atualizarBtnActionPerformed

    private void criarClienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarClienteBtnActionPerformed
        Cliente ClienteSelecionado = (Cliente) ClienteComboBox.getSelectedItem();
        TipoServico ServicoSelecionado = (TipoServico) ServicoComboBox.getSelectedItem();
        String dia = DiaInput.getText().trim();
        String mes = MesInput.getText().trim();
        String ano = AnoInput.getText().trim();
        String hora = HoraInput.getText().trim();

        // Verificações básicas
        if (ClienteSelecionado == null) {
            JOptionPane.showMessageDialog(null, "O nome é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ServicoSelecionado == null) {
            JOptionPane.showMessageDialog(null, "O serviço é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (dia.isEmpty()) {
            JOptionPane.showMessageDialog(null, "O dia é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (mes.isEmpty()) {
            JOptionPane.showMessageDialog(null, "O mês é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (ano.isEmpty()) {
            JOptionPane.showMessageDialog(null, "O ano é obrigatório.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (hora.isEmpty()) {
            JOptionPane.showMessageDialog(null, "A hora é obrigatória.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        LocalDateTime dataHora;
        try {
            // Separa hora e minuto
            String[] partesHora = hora.split(":");
            int horaInt = Integer.parseInt(partesHora[0]);
            int minutoInt = Integer.parseInt(partesHora[1]);

            // Cria o LocalDateTime
            dataHora = LocalDateTime.of(
                Integer.parseInt(ano),
                Integer.parseInt(mes),
                Integer.parseInt(dia),
                horaInt,
                minutoInt
            );

            System.out.println("Data e hora: " + dataHora);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Erro ao montar data e hora: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            agendamentoController.criarAgendamento(ClienteSelecionado, ServicoSelecionado, dataHora);
            JOptionPane.showMessageDialog(null, "Agendamento criado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(TelaClientes.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_criarClienteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AnoInput;
    private javax.swing.JPanel CPFPane;
    private javax.swing.JLabel CadastrarClientTitle;
    private javax.swing.JLabel CadastrarClientTitle1;
    private javax.swing.JPanel CadastrarClientePane;
    private javax.swing.JComboBox<Cliente> ClienteComboBox;
    private javax.swing.JTextField DiaInput;
    private javax.swing.JPanel EmailPane;
    private javax.swing.JTextField HoraInput;
    private javax.swing.JPanel Inputs;
    private javax.swing.JTextField MesInput;
    private javax.swing.JPanel NomePane;
    private javax.swing.JSeparator Separator;
    private javax.swing.JComboBox<TipoServico> ServicoComboBox;
    private javax.swing.JPanel TabelaClientePane;
    private javax.swing.JButton atualizarBtn;
    private javax.swing.JButton criarClienteBtn;
    private javax.swing.JButton excluirBtn;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tabelaAgendamentos;
    // End of variables declaration//GEN-END:variables
}
